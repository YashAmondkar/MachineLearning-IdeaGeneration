/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Apr 9, 2013, 6:06:31 AM
 */

package cloudserver;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Vector;

/**
 * Sa# Re Ga Ma Pa Dha Ni# #Sa = C D E F G A B C
 * 
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame()
    {
        initComponents();
        listData = new Vector();

        clientList = new ArrayList<Client>();
        inputNoteList = new ArrayList<String>();
       //  inputFreqList = new ArrayList<String>();



         //  inputNoteList.add(0, "O");
        Properties pro = new Properties();
         try {
                pro.load(new FileInputStream("src/myProperty.config"));
         } catch (IOException ex)
         {
            ex.printStackTrace();
         }

         System.out.println("Property value:"+pro.getProperty("ClientHostPort"));
         String hostPortList = pro.getProperty("ClientHostPort");
         hostPort = hostPortList.split(",");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPaMinor = new javax.swing.JButton();
        buttonDhaMinor = new javax.swing.JButton();
        buttonSa = new javax.swing.JButton();
        buttonRe = new javax.swing.JButton();
        buttonGa = new javax.swing.JButton();
        buttonPa = new javax.swing.JButton();
        buttonDha = new javax.swing.JButton();
        buttonSaMajor = new javax.swing.JButton();
        buttonReMajor = new javax.swing.JButton();
        buttonGaMajor = new javax.swing.JButton();
        buttonReset = new javax.swing.JButton();
        buttonSubmit = new javax.swing.JButton();
        lableInputNotes = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Idea Generation Server");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(100, 100, 0, 0));
        setMinimumSize(new java.awt.Dimension(1005, 600));
        setResizable(false);
        getContentPane().setLayout(null);

        buttonPaMinor.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        buttonPaMinor.setForeground(new java.awt.Color(255, 255, 255));
        buttonPaMinor.setText("Pa #");
        buttonPaMinor.setBorderPainted(false);
        buttonPaMinor.setContentAreaFilled(false);
        buttonPaMinor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPaMinorActionPerformed(evt);
            }
        });
        getContentPane().add(buttonPaMinor);
        buttonPaMinor.setBounds(100, 20, 70, 190);

        buttonDhaMinor.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        buttonDhaMinor.setText("Dha #");
        buttonDhaMinor.setBorderPainted(false);
        buttonDhaMinor.setContentAreaFilled(false);
        buttonDhaMinor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDhaMinorActionPerformed(evt);
            }
        });
        getContentPane().add(buttonDhaMinor);
        buttonDhaMinor.setBounds(130, 210, 70, 140);

        buttonSa.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        buttonSa.setForeground(new java.awt.Color(255, 255, 255));
        buttonSa.setText(" Sa  ");
        buttonSa.setBorderPainted(false);
        buttonSa.setContentAreaFilled(false);
        buttonSa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaActionPerformed(evt);
            }
        });
        getContentPane().add(buttonSa);
        buttonSa.setBounds(300, 20, 60, 190);

        buttonRe.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        buttonRe.setForeground(new java.awt.Color(255, 255, 255));
        buttonRe.setText(" Re  ");
        buttonRe.setBorderPainted(false);
        buttonRe.setContentAreaFilled(false);
        buttonRe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReActionPerformed(evt);
            }
        });
        getContentPane().add(buttonRe);
        buttonRe.setBounds(370, 20, 63, 190);

        buttonGa.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        buttonGa.setText("Ga");
        buttonGa.setBorderPainted(false);
        buttonGa.setContentAreaFilled(false);
        buttonGa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGaActionPerformed(evt);
            }
        });
        getContentPane().add(buttonGa);
        buttonGa.setBounds(467, 213, 70, 140);

        buttonPa.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        buttonPa.setForeground(new java.awt.Color(255, 255, 255));
        buttonPa.setText("Pa");
        buttonPa.setBorderPainted(false);
        buttonPa.setContentAreaFilled(false);
        buttonPa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPaActionPerformed(evt);
            }
        });
        getContentPane().add(buttonPa);
        buttonPa.setBounds(570, 20, 60, 190);

        buttonDha.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        buttonDha.setText("Dha");
        buttonDha.setBorderPainted(false);
        buttonDha.setContentAreaFilled(false);
        buttonDha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDhaActionPerformed(evt);
            }
        });
        getContentPane().add(buttonDha);
        buttonDha.setBounds(600, 210, 64, 140);

        buttonSaMajor.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        buttonSaMajor.setForeground(new java.awt.Color(255, 255, 255));
        buttonSaMajor.setText("# Sa");
        buttonSaMajor.setBorderPainted(false);
        buttonSaMajor.setContentAreaFilled(false);
        buttonSaMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaMajorActionPerformed(evt);
            }
        });
        getContentPane().add(buttonSaMajor);
        buttonSaMajor.setBounds(700, 20, 60, 190);

        buttonReMajor.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        buttonReMajor.setForeground(new java.awt.Color(255, 255, 255));
        buttonReMajor.setText("# Re");
        buttonReMajor.setBorderPainted(false);
        buttonReMajor.setContentAreaFilled(false);
        buttonReMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReMajorActionPerformed(evt);
            }
        });
        getContentPane().add(buttonReMajor);
        buttonReMajor.setBounds(770, 20, 60, 190);

        buttonGaMajor.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        buttonGaMajor.setText("# Ga");
        buttonGaMajor.setBorderPainted(false);
        buttonGaMajor.setContentAreaFilled(false);
        buttonGaMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGaMajorActionPerformed(evt);
            }
        });
        getContentPane().add(buttonGaMajor);
        buttonGaMajor.setBounds(870, 210, 66, 140);

        buttonReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cloudserver/z_Buttons_reset.jpg"))); // NOI18N
        buttonReset.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(51, 0, 102)));
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });
        getContentPane().add(buttonReset);
        buttonReset.setBounds(210, 460, 130, 60);

        buttonSubmit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cloudserver/z_Buttons_submit.jpg"))); // NOI18N
        buttonSubmit.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(51, 0, 102)));
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(buttonSubmit);
        buttonSubmit.setBounds(440, 460, 130, 60);

        lableInputNotes.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        lableInputNotes.setForeground(new java.awt.Color(51, 51, 51));
        lableInputNotes.setText(" ");
        lableInputNotes.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 3, true));
        getContentPane().add(lableInputNotes);
        lableInputNotes.setBounds(210, 370, 590, 40);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cloudserver/z_Buttons_back.jpg"))); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(51, 0, 102)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(670, 460, 130, 60);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cloudserver/u.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1000, 370);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cloudserver/music~4.jpg"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 340, 1000, 258);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonPaMinorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPaMinorActionPerformed
        // TODO add your handling code here:
        
     
        inputNoteList.add("g");
      
        lableInputNotes.setText(lableInputNotes.getText()+"Pa# ");
        buttonPaMinor.setEnabled(false);
    }//GEN-LAST:event_buttonPaMinorActionPerformed

    private void buttonDhaMinorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDhaMinorActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("a");
    
        lableInputNotes.setText(lableInputNotes.getText()+"Dha# ");
        buttonDhaMinor.setEnabled(false);
    }//GEN-LAST:event_buttonDhaMinorActionPerformed

    private void buttonSaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("C");
      
        lableInputNotes.setText(lableInputNotes.getText()+"Sa ");
        buttonSa.setEnabled(false);
    }//GEN-LAST:event_buttonSaActionPerformed

    private void buttonReActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("D");
        
        lableInputNotes.setText(lableInputNotes.getText()+"Re ");
        buttonRe.setEnabled(false);
    }//GEN-LAST:event_buttonReActionPerformed

    private void buttonGaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGaActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("E");
       
        lableInputNotes.setText(lableInputNotes.getText()+"Ga ");
        buttonGa.setEnabled(false);
    }//GEN-LAST:event_buttonGaActionPerformed

    private void buttonPaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPaActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("G");
       
        lableInputNotes.setText(lableInputNotes.getText()+"Pa ");
        buttonPa.setEnabled(false);
    }//GEN-LAST:event_buttonPaActionPerformed

    private void buttonDhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDhaActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("A");
        
        lableInputNotes.setText(lableInputNotes.getText()+"Dha ");
        buttonDha.setEnabled(false);
    }//GEN-LAST:event_buttonDhaActionPerformed

    private void buttonSaMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaMajorActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("c");
        
        lableInputNotes.setText(lableInputNotes.getText()+"#Sa ");
        buttonSaMajor.setEnabled(false);
    }//GEN-LAST:event_buttonSaMajorActionPerformed

    private void buttonReMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReMajorActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("d");
       
        lableInputNotes.setText(lableInputNotes.getText()+"#Re ");
        buttonReMajor.setEnabled(false);
    }//GEN-LAST:event_buttonReMajorActionPerformed

    private void buttonGaMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGaMajorActionPerformed
        // TODO add your handling code here:
        inputNoteList.add("e");
     
        lableInputNotes.setText(lableInputNotes.getText()+"#Ga ");

        buttonGaMajor.setEnabled(false);
    }//GEN-LAST:event_buttonGaMajorActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        // TODO add your handling code here:
        inputNoteList.clear();
        //Changes done here
      // 
        lableInputNotes.setText("");
        buttonSaMajor.setEnabled(true);
        buttonReMajor.setEnabled(true);
        buttonGaMajor.setEnabled(true);

        buttonPaMinor.setEnabled(true);
        buttonDhaMinor.setEnabled(true);

        buttonSa.setEnabled(true);
        buttonRe.setEnabled(true);
        buttonGa.setEnabled(true);
        buttonPa.setEnabled(true);
        buttonDha.setEnabled(true);
       // inputNoteList.add(11, "O");
    }//GEN-LAST:event_buttonResetActionPerformed

    private void buttonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubmitActionPerformed
        // TODO add your handling code here:
      
       Task task = Task.getInstance();
   
        task.setNotes(inputNoteList);
        task.populateArray();
     
        task.setNoOfClient(hostPort.length);
        int totalElements = task.getRequestSargamsSize();
        int elementPerClient = totalElements / hostPort.length;

        int startIndex = 0;
        int endIndex = elementPerClient-1;

        for(String hp : hostPort)
        {
            String [] ipPort = hp.split(":");
            System.out.println("IP number"+ipPort[0]+"Port Number"+ipPort[1]);
            Client client = new Client(ipPort[0], ipPort[1]);
            client.setStartAndEndIndex(startIndex, endIndex);//set Start and End Index
            client.start();

            clientList.add(client);

            startIndex = endIndex+1;
            endIndex += elementPerClient;
        }

        //Check all clients are done with there task...
        int noOfClientDone = 0;
        while(true)
        {
            System.out.println("Inside while..");
            for(int j = 0; j<clientList.size(); j++)
            {
         	   Client client = clientList.get(j);
         	   if(client.iAmDone)
                {
                    clientList.remove(client);
                    noOfClientDone++;
                }
            }

            System.out.println("Clientlist size: " + clientList.size());
            if(clientList.size() == noOfClientDone)
            {
            		System.out.println("Before break");
                 break;
            }
            noOfClientDone = 0;
            try {
                Thread.currentThread().sleep(1003);
            } catch (InterruptedException ex) {

            }
        }
        List<Sargam> finalSargamList= Client.getResponseSargam();
        
        listData.clear();

        StringBuilder sb = new StringBuilder();
        for(Sargam s : finalSargamList)
        {
            listData.add(s.toString());
            sb.append(s.toString());
            sb.append(":");
        }
        PrintWriter pw=null;
        try
        {
            File file=new File("C:\\Users\\Akshay\\Desktop\\Project Data\\Server_Combinations.txt");
            FileWriter fw=new FileWriter(file,false);
            pw=new PrintWriter(fw);

         System.out.println("Frequency Representation Of Notes(5th Octave)");
        for(Sargam sr : finalSargamList)
        {
            
            
            for(int i=0;i<=11;i++)
            {
                if(sr.getSargamNotes().get(i).equals("g"))
                {

                System.out.print("0.0392 ");
                pw.print("0.0392 ");
               
                }
                if(sr.getSargamNotes().get(i).equals("a"))
                {
                System.out.print("0.0440 ");
                pw.print("0.0440 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("C"))
                {
                System.out.print("0.0520 ");
                pw.print("0.0520 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("D"))
                {
                System.out.print("0.0587 ");
                pw.print("0.0587 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("E"))
                {
                System.out.print("0.0659 ");
                pw.print("0.0659 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("G"))
                {
                System.out.print("0.0783 ");
                pw.print("0.0783 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("A"))
                {
                System.out.print("0.0880 ");
                pw.print("0.0880 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("c"))
                {
                System.out.print("0.1046 ");
                pw.print("0.1046 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("d"))
                {
                System.out.print("0.1174 ");
                pw.print("0.1174 ");
                
                }
                if(sr.getSargamNotes().get(i).equals("e"))
                {
                System.out.print("0.1318 ");
                pw.print("0.1318 ");
                
                }
               if(sr.getSargamNotes().get(i).equals("O"))
                {
                System.out.print("0 ");
                pw.print("0.0 ");
                
                }
               
              
            }
             System.out.println("");
             pw.println();
             
            
        }
        }
        catch(IOException ioe)
        {
            System.out.println(ioe);
        }
        finally{
        if(pw!=null)
        {
        pw.close();
        }
        }

        
        lableInputNotes.getText();
        try {
            int tuneId = 0;
            MySqlConnection mysql= new MySqlConnection();
            Connection con = (Connection) mysql.getMySQLConnection();
            ResultSet rs = con.prepareStatement("select max(tune_id) from data").executeQuery();
            if(rs.next())
            {
                tuneId = rs.getInt(1);
            }
            tuneId++;
          
            String query = "INSERT INTO DATA (input , output , tune_id) VALUES('"+ lableInputNotes.getText()+"', '"+sb.toString()+"' , "+tuneId+")";
            System.out.println(query);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeUpdate();
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    
         
         

        
       String inputString = lableInputNotes.getText();
       PlayTune tune = new PlayTune();
       tune.show();
       this.dispose();
         
       
    }//GEN-LAST:event_buttonSubmitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AdminArea admin = new AdminArea();
        admin.show();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDha;
    private javax.swing.JButton buttonDhaMinor;
    private javax.swing.JButton buttonGa;
    private javax.swing.JButton buttonGaMajor;
    private javax.swing.JButton buttonPa;
    private javax.swing.JButton buttonPaMinor;
    private javax.swing.JButton buttonRe;
    private javax.swing.JButton buttonReMajor;
    private javax.swing.JButton buttonReset;
    private javax.swing.JButton buttonSa;
    private javax.swing.JButton buttonSaMajor;
    private javax.swing.JButton buttonSubmit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lableInputNotes;
    // End of variables declaration//GEN-END:variables
    private List<Client> clientList;
    private String [] hostPort;
    private List<String> inputNoteList;
   
    private Vector listData;

}
